#!/usr/bin/env python
"""
Script d'initialisation du syst√®me d'alertes de conformit√© RGPD/HIPAA/CDP
"""

import os
import sys
import django
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend_project.settings')
django.setup()

from api.services_conformite import ServiceAlertesConformite
from api.models import TypeAlerteConformite, RegleAlerteConformite

def initialiser_systeme_alertes():
    """Initialise le syst√®me complet d'alertes de conformit√©"""
    
    print("üöÄ INITIALISATION DU SYST√àME D'ALERTES DE CONFORMIT√â")
    print("="*60)
    
    # 1. Initialiser les types d'alertes
    print("\nüìã 1. Initialisation des types d'alertes...")
    ServiceAlertesConformite.initialiser_types_alertes()
    
    types_alertes = TypeAlerteConformite.objects.all()
    print(f"   ‚úÖ {types_alertes.count()} types d'alertes cr√©√©s")
    
    # Afficher les types par norme
    for norme in ['RGPD', 'HIPAA', 'CDP', 'GENERAL']:
        count = types_alertes.filter(norme_conformite=norme).count()
        print(f"      ‚Ä¢ {norme}: {count} types")
    
    # 2. Cr√©er des r√®gles d'alertes par d√©faut
    print("\n‚öôÔ∏è 2. Cr√©ation des r√®gles d'alertes par d√©faut...")
    
    regles_defaut = [
        {
            'nom': 'Surveillance acc√®s non autoris√©s',
            'description': 'D√©tecte les tentatives d\'acc√®s non autoris√©es',
            'type_alerte_code': 'ACCES_NON_AUTORISE',
            'seuil_min': 1,
            'action_automatique': 'NOTIFICATION',
            'notifier_admin': True,
            'notifier_dpo': True
        },
        {
            'nom': 'Surveillance consultations excessives',
            'description': 'D√©tecte les consultations excessives de dossiers',
            'type_alerte_code': 'CONSULTATION_EXCESSIVE',
            'seuil_max': 50,
            'periode_surveillance': 1,
            'action_automatique': 'NOTIFICATION',
            'notifier_admin': True
        },
        {
            'nom': 'Surveillance violations RGPD',
            'description': 'D√©tecte les violations de donn√©es personnelles',
            'type_alerte_code': 'RGPD_VIOLATION_DONNEES',
            'action_automatique': 'ESCALADER',
            'notifier_admin': True,
            'notifier_dpo': True,
            'notifier_cdp': True
        },
        {
            'nom': 'Surveillance violations HIPAA',
            'description': 'D√©tecte les acc√®s non autoris√©s aux PHI',
            'type_alerte_code': 'HIPAA_PHI_ACCES_NON_AUTORISE',
            'action_automatique': 'BLOQUER_ACCES',
            'notifier_admin': True,
            'notifier_dpo': True
        },
        {
            'nom': 'Surveillance violations CDP',
            'description': 'D√©tecte les violations du secret m√©dical',
            'type_alerte_code': 'CDP_SECRET_MEDICAL_VIOLATION',
            'action_automatique': 'ESCALADER',
            'notifier_admin': True,
            'notifier_cdp': True
        }
    ]
    
    regles_crees = 0
    for regle_data in regles_defaut:
        try:
            type_alerte = TypeAlerteConformite.objects.get(code=regle_data['type_alerte_code'])
            
            regle, created = RegleAlerteConformite.objects.get_or_create(
                nom=regle_data['nom'],
                defaults={
                    'description': regle_data['description'],
                    'type_alerte': type_alerte,
                    'seuil_min': regle_data.get('seuil_min'),
                    'seuil_max': regle_data.get('seuil_max'),
                    'periode_surveillance': regle_data.get('periode_surveillance', 24),
                    'action_automatique': regle_data['action_automatique'],
                    'notifier_admin': regle_data.get('notifier_admin', True),
                    'notifier_dpo': regle_data.get('notifier_dpo', False),
                    'notifier_cdp': regle_data.get('notifier_cdp', False),
                    'is_active': True
                }
            )
            
            if created:
                regles_crees += 1
                print(f"   ‚úÖ R√®gle cr√©√©e: {regle.nom}")
            else:
                print(f"   ‚ö†Ô∏è R√®gle existante: {regle.nom}")
                
        except TypeAlerteConformite.DoesNotExist:
            print(f"   ‚ùå Type d'alerte non trouv√©: {regle_data['type_alerte_code']}")
        except Exception as e:
            print(f"   ‚ùå Erreur cr√©ation r√®gle {regle_data['nom']}: {e}")
    
    print(f"   üìä {regles_crees} nouvelles r√®gles cr√©√©es")
    
    # 3. Tester la surveillance
    print("\nüîç 3. Test de la surveillance de conformit√©...")
    try:
        alertes_crees = ServiceAlertesConformite.executer_surveillance_conformite()
        print(f"   ‚úÖ Surveillance test√©e: {len(alertes_crees)} alertes cr√©√©es")
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test: {e}")
    
    # 4. Afficher les statistiques
    print("\nüìä 4. Statistiques du syst√®me...")
    try:
        stats = ServiceAlertesConformite.obtenir_statistiques_conformite()
        print(f"   ‚Ä¢ Total alertes: {stats.get('total_alertes', 0)}")
        print(f"   ‚Ä¢ Alertes nouvelles: {stats.get('alertes_nouvelles', 0)}")
        print(f"   ‚Ä¢ Alertes RGPD: {stats.get('alertes_rgpd', 0)}")
        print(f"   ‚Ä¢ Alertes HIPAA: {stats.get('alertes_hipaa', 0)}")
        print(f"   ‚Ä¢ Alertes CDP: {stats.get('alertes_cdp', 0)}")
    except Exception as e:
        print(f"   ‚ùå Erreur statistiques: {e}")
    
    # 5. Configuration recommand√©e
    print("\n‚öôÔ∏è 5. Configuration recommand√©e...")
    config_recommandee = {
        'activation_surveillance': True,
        'delai_notification_defaut': 24,
        'escalation_automatique': True,
        'seuil_acces_non_autorise': 3,
        'seuil_consultation_excessive': 50,
        'seuil_modification_non_autorisee': 2,
        'notifier_admin_par_defaut': True,
        'notifier_dpo_par_defaut': False,
        'notifier_cdp_par_defaut': False,
        'bloquer_acces_automatique': False,
        'fermer_session_automatique': False,
        'logger_toutes_actions': True
    }
    
    from django.core.cache import cache
    cache.set('config_alertes_conformite', config_recommandee, 3600)
    print("   ‚úÖ Configuration par d√©faut sauvegard√©e")
    
    print("\n" + "="*60)
    print("üéâ SYST√àME D'ALERTES DE CONFORMIT√â INITIALIS√â AVEC SUCC√àS!")
    print("="*60)
    
    print("\nüìã R√âCAPITULATIF:")
    print(f"   ‚Ä¢ Types d'alertes: {TypeAlerteConformite.objects.count()}")
    print(f"   ‚Ä¢ R√®gles actives: {RegleAlerteConformite.objects.filter(is_active=True).count()}")
    print(f"   ‚Ä¢ Configuration: Sauvegard√©e")
    
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("   1. Configurer les notifications email/SMS")
    print("   2. D√©finir les seuils sp√©cifiques √† votre organisation")
    print("   3. Former les utilisateurs sur les alertes")
    print("   4. Mettre en place la surveillance automatique")
    
    print("\nüìö DOCUMENTATION:")
    print("   ‚Ä¢ API Endpoints: /api/conformite/")
    print("   ‚Ä¢ Interface: /admin/")
    print("   ‚Ä¢ Rapports: /api/conformite/rapport/")
    
    return True

if __name__ == "__main__":
    try:
        initialiser_systeme_alertes()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        sys.exit(1) 