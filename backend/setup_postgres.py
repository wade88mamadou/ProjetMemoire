#!/usr/bin/env python3
"""
Script de configuration PostgreSQL pour ConformiMed
Ce script cr√©e la base de donn√©es et l'utilisateur PostgreSQL
"""

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import sys
import os

def create_database():
    """Cr√©e la base de donn√©es et l'utilisateur PostgreSQL"""
    
    # Configuration par d√©faut
    DB_NAME = 'conformimed_db'
    DB_USER = 'conformimed_user'
    DB_PASSWORD = 'conformimed_password'
    DB_HOST = 'localhost'
    DB_PORT = '5432'
    
    # Connexion √† PostgreSQL en tant que superutilisateur
    try:
        # Connexion √† la base de donn√©es postgres (base par d√©faut)
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            database='postgres',
            user='postgres',  # Utilisateur par d√©faut PostgreSQL
            password=input("Entrez le mot de passe PostgreSQL (postgres): ") or 'postgres'
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        print("‚úÖ Connexion √† PostgreSQL √©tablie")
        
        # Cr√©er l'utilisateur
        try:
            cursor.execute(f"CREATE USER {DB_USER} WITH PASSWORD '{DB_PASSWORD}';")
            print(f"‚úÖ Utilisateur {DB_USER} cr√©√©")
        except psycopg2.errors.DuplicateObject:
            print(f"‚ö†Ô∏è  L'utilisateur {DB_USER} existe d√©j√†")
        
        # Cr√©er la base de donn√©es
        try:
            cursor.execute(f"CREATE DATABASE {DB_NAME} OWNER {DB_USER};")
            print(f"‚úÖ Base de donn√©es {DB_NAME} cr√©√©e")
        except psycopg2.errors.DuplicateDatabase:
            print(f"‚ö†Ô∏è  La base de donn√©es {DB_NAME} existe d√©j√†")
        
        # Accorder les privil√®ges
        try:
            cursor.execute(f"GRANT ALL PRIVILEGES ON DATABASE {DB_NAME} TO {DB_USER};")
            print(f"‚úÖ Privil√®ges accord√©s √† {DB_USER}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de l'attribution des privil√®ges: {e}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ Configuration PostgreSQL termin√©e avec succ√®s!")
        print(f"Base de donn√©es: {DB_NAME}")
        print(f"Utilisateur: {DB_USER}")
        print(f"Mot de passe: {DB_PASSWORD}")
        print(f"H√¥te: {DB_HOST}:{DB_PORT}")
        
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erreur de connexion √† PostgreSQL: {e}")
        print("\nAssurez-vous que:")
        print("1. PostgreSQL est install√© et en cours d'ex√©cution")
        print("2. Le service PostgreSQL est d√©marr√©")
        print("3. L'utilisateur 'postgres' existe avec le bon mot de passe")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_connection():
    """Teste la connexion √† la nouvelle base de donn√©es"""
    
    DB_NAME = 'conformimed_db'
    DB_USER = 'conformimed_user'
    DB_PASSWORD = 'conformimed_password'
    DB_HOST = 'localhost'
    DB_PORT = '5432'
    
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        cursor.close()
        conn.close()
        
        print(f"‚úÖ Test de connexion r√©ussi!")
        print(f"Version PostgreSQL: {version[0]}")
        return True
        
    except Exception as e:
        print(f"‚ùå √âchec du test de connexion: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Configuration PostgreSQL pour ConformiMed")
    print("=" * 50)
    
    if create_database():
        print("\n" + "=" * 50)
        print("üß™ Test de la connexion...")
        test_connection()
        
        print("\n" + "=" * 50)
        print("üìã Prochaines √©tapes:")
        print("1. Ex√©cutez: python manage.py makemigrations")
        print("2. Ex√©cutez: python manage.py migrate")
        print("3. Ex√©cutez: python manage.py createsuperuser")
        print("4. D√©marrez le serveur: python manage.py runserver")
    else:
        sys.exit(1) 