#!/usr/bin/env python
"""
Script d'optimisation des performances du syst√®me de conformit√© m√©dicale
Am√©liore les performances de l'API et de la base de donn√©es
"""

import os
import sys
import django
import time
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend_project.settings')
django.setup()

from django.db import connection
from django.core.cache import cache
from django.conf import settings
from api.models import *
from api.views import *
from rest_framework.test import APITestCase
from rest_framework.test import APIClient

class OptimisationPerformances:
    """Classe pour optimiser les performances du syst√®me"""
    
    def __init__(self):
        self.client = APIClient()
        self.results = {
            'optimisations': [],
            'tests_performance': [],
            'recommandations': []
        }
    
    def log_optimisation(self, nom, details, impact):
        """Log une optimisation"""
        self.results['optimisations'].append({
            'nom': nom,
            'details': details,
            'impact': impact,
            'timestamp': datetime.now().isoformat()
        })
        print(f"üîß {nom}: {details} (Impact: {impact})")
    
    def log_test(self, nom, temps_avant, temps_apres, amelioration):
        """Log un test de performance"""
        self.results['tests_performance'].append({
            'nom': nom,
            'temps_avant': temps_avant,
            'temps_apres': temps_apres,
            'amelioration': amelioration,
            'timestamp': datetime.now().isoformat()
        })
        print(f"‚ö° {nom}: {temps_avant:.3f}s ‚Üí {temps_apres:.3f}s (Am√©lioration: {amelioration:.1f}%)")
    
    def log_recommandation(self, nom, description, priorite):
        """Log une recommandation"""
        self.results['recommandations'].append({
            'nom': nom,
            'description': description,
            'priorite': priorite,
            'timestamp': datetime.now().isoformat()
        })
        print(f"üí° {nom}: {description} (Priorit√©: {priorite})")
    
    def optimiser_requetes_patients(self):
        """Optimiser les requ√™tes des patients"""
        try:
            # Test avant optimisation
            start_time = time.time()
            patients = Patient.objects.all()
            for patient in patients[:10]:  # Test sur 10 patients
                _ = patient.profession
                _ = patient.residence
            temps_avant = time.time() - start_time
            
            # Optimisation avec select_related
            start_time = time.time()
            patients_optimises = Patient.objects.select_related('profession', 'residence').all()
            for patient in patients_optimises[:10]:
                _ = patient.profession
                _ = patient.residence
            temps_apres = time.time() - start_time
            
            amelioration = ((temps_avant - temps_apres) / temps_avant) * 100
            
            self.log_test("Requ√™tes Patients", temps_avant, temps_apres, amelioration)
            self.log_optimisation(
                "select_related pour Patient", 
                "Ajout de select_related pour profession et residence",
                f"R√©duction de {amelioration:.1f}% du temps de requ√™te"
            )
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'optimisation des patients: {e}")
    
    def optimiser_requetes_dossiers(self):
        """Optimiser les requ√™tes des dossiers m√©dicaux"""
        try:
            # Test avant optimisation
            start_time = time.time()
            dossiers = DossierMedical.objects.all()
            for dossier in dossiers[:10]:
                _ = dossier.patient.profession
                _ = dossier.patient.residence
            temps_avant = time.time() - start_time
            
            # Optimisation avec select_related et prefetch_related
            start_time = time.time()
            dossiers_optimises = DossierMedical.objects.select_related(
                'patient__profession', 
                'patient__residence'
            ).prefetch_related('analyse_set', 'alerte_set').all()
            
            for dossier in dossiers_optimises[:10]:
                _ = dossier.patient.profession
                _ = dossier.patient.residence
                _ = list(dossier.analyse_set.all())
                _ = list(dossier.alerte_set.all())
            temps_apres = time.time() - start_time
            
            amelioration = ((temps_avant - temps_apres) / temps_avant) * 100
            
            self.log_test("Requ√™tes Dossiers", temps_avant, temps_apres, amelioration)
            self.log_optimisation(
                "select_related et prefetch_related pour DossierMedical",
                "Optimisation des relations patient, analyses et alertes",
                f"R√©duction de {amelioration:.1f}% du temps de requ√™te"
            )
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'optimisation des dossiers: {e}")
    
    def optimiser_cache(self):
        """Optimiser l'utilisation du cache"""
        try:
            # Test sans cache
            start_time = time.time()
            for _ in range(10):
                total_patients = Patient.objects.count()
                total_dossiers = DossierMedical.objects.count()
            temps_sans_cache = time.time() - start_time
            
            # Test avec cache
            start_time = time.time()
            for _ in range(10):
                total_patients = cache.get('total_patients')
                if total_patients is None:
                    total_patients = Patient.objects.count()
                    cache.set('total_patients', total_patients, 300)  # 5 minutes
                
                total_dossiers = cache.get('total_dossiers')
                if total_dossiers is None:
                    total_dossiers = DossierMedical.objects.count()
                    cache.set('total_dossiers', total_dossiers, 300)  # 5 minutes
            temps_avec_cache = time.time() - start_time
            
            amelioration = ((temps_sans_cache - temps_avec_cache) / temps_sans_cache) * 100
            
            self.log_test("Cache Statistiques", temps_sans_cache, temps_avec_cache, amelioration)
            self.log_optimisation(
                "Cache pour statistiques",
                "Mise en cache des statistiques fr√©quemment utilis√©es",
                f"R√©duction de {amelioration:.1f}% du temps de calcul"
            )
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'optimisation du cache: {e}")
    
    def optimiser_index_base_donnees(self):
        """Optimiser les index de la base de donn√©es"""
        try:
            # V√©rifier les index existants
            with connection.cursor() as cursor:
                cursor.execute("""
                    SELECT indexname, tablename 
                    FROM pg_indexes 
                    WHERE tablename IN ('api_patient', 'api_dossiermedical', 'api_alerte')
                    ORDER BY tablename, indexname;
                """)
                index_existants = cursor.fetchall()
            
            self.log_optimisation(
                "V√©rification des index",
                f"Trouv√© {len(index_existants)} index existants",
                "Base pour l'optimisation"
            )
            
            # Recommandations d'index
            index_recommandes = [
                "CREATE INDEX IF NOT EXISTS idx_patient_id_code ON api_patient(id_code);",
                "CREATE INDEX IF NOT EXISTS idx_patient_sexe ON api_patient(sexe);",
                "CREATE INDEX IF NOT EXISTS idx_dossier_date_creation ON api_dossiermedical(dateCreation);",
                "CREATE INDEX IF NOT EXISTS idx_alerte_date_gravite ON api_alerte(dateAlerte, gravite);",
                "CREATE INDEX IF NOT EXISTS idx_alerte_gravite ON api_alerte(gravite);",
            ]
            
            for index_sql in index_recommandes:
                try:
                    with connection.cursor() as cursor:
                        cursor.execute(index_sql)
                    self.log_optimisation(
                        "Cr√©ation d'index",
                        index_sql,
                        "Am√©lioration des performances de requ√™te"
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è Index d√©j√† existant ou erreur: {e}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'optimisation des index: {e}")
    
    def optimiser_pagination(self):
        """Optimiser la pagination"""
        try:
            # Test pagination par d√©faut
            start_time = time.time()
            patients = Patient.objects.all()
            page_size = 20
            for i in range(0, min(100, patients.count()), page_size):
                page = patients[i:i+page_size]
                _ = list(page)
            temps_avant = time.time() - start_time
            
            # Test pagination optimis√©e
            start_time = time.time()
            patients_optimises = Patient.objects.select_related('profession', 'residence').all()
            for i in range(0, min(100, patients_optimises.count()), page_size):
                page = patients_optimises[i:i+page_size]
                _ = list(page)
            temps_apres = time.time() - start_time
            
            amelioration = ((temps_avant - temps_apres) / temps_avant) * 100
            
            self.log_test("Pagination", temps_avant, temps_apres, amelioration)
            self.log_optimisation(
                "Pagination optimis√©e",
                "Combinaison de select_related avec pagination",
                f"R√©duction de {amelioration:.1f}% du temps de pagination"
            )
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'optimisation de la pagination: {e}")
    
    def analyser_requetes_lentes(self):
        """Analyser les requ√™tes lentes"""
        try:
            # Activer le logging des requ√™tes
            from django.db import connection
            from django.test.utils import override_settings
            
            with override_settings(DEBUG=True):
                # Effectuer quelques requ√™tes
                Patient.objects.count()
                DossierMedical.objects.select_related('patient').all()[:10]
                Alerte.objects.filter(gravite='critique').count()
                
                # Analyser les requ√™tes
                queries = connection.queries
                requetes_lentes = [q for q in queries if float(q['time']) > 0.1]
                
                if requetes_lentes:
                    self.log_optimisation(
                        "D√©tection requ√™tes lentes",
                        f"Trouv√© {len(requetes_lentes)} requ√™tes > 100ms",
                        "Optimisation cibl√©e n√©cessaire"
                    )
                    
                    for i, query in enumerate(requetes_lentes[:3]):
                        self.log_recommandation(
                            f"Requ√™te lente #{i+1}",
                            f"SQL: {query['sql'][:100]}... (Temps: {query['time']}s)",
                            "Haute"
                        )
                else:
                    self.log_optimisation(
                        "Analyse requ√™tes",
                        "Aucune requ√™te lente d√©tect√©e",
                        "Performance satisfaisante"
                    )
                    
        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse des requ√™tes: {e}")
    
    def generer_recommandations(self):
        """G√©n√©rer des recommandations d'optimisation"""
        recommandations = [
            {
                'nom': 'Cache Redis',
                'description': 'Impl√©menter Redis pour le cache des statistiques et donn√©es fr√©quemment acc√©d√©es',
                'priorite': 'Haute'
            },
            {
                'nom': 'CDN pour assets statiques',
                'description': 'Utiliser un CDN pour servir les fichiers CSS/JS du frontend',
                'priorite': 'Moyenne'
            },
            {
                'nom': 'Compression GZIP',
                'description': 'Activer la compression GZIP pour r√©duire la taille des r√©ponses API',
                'priorite': 'Haute'
            },
            {
                'nom': 'Database connection pooling',
                'description': 'Configurer le pooling de connexions pour PostgreSQL',
                'priorite': 'Moyenne'
            },
            {
                'nom': 'Monitoring des performances',
                'description': 'Impl√©menter APM (Application Performance Monitoring)',
                'priorite': 'Basse'
            }
        ]
        
        for rec in recommandations:
            self.log_recommandation(rec['nom'], rec['description'], rec['priorite'])
    
    def generer_rapport(self):
        """G√©n√©rer un rapport d'optimisation"""
        print("\n" + "="*60)
        print("üöÄ RAPPORT D'OPTIMISATION DES PERFORMANCES")
        print("="*60)
        
        print(f"\nüìä R√âSULTATS:")
        print(f"   üîß Optimisations appliqu√©es: {len(self.results['optimisations'])}")
        print(f"   ‚ö° Tests de performance: {len(self.results['tests_performance'])}")
        print(f"   üí° Recommandations: {len(self.results['recommandations'])}")
        
        if self.results['tests_performance']:
            print(f"\n‚ö° AM√âLIORATIONS DE PERFORMANCE:")
            total_amelioration = 0
            for test in self.results['tests_performance']:
                print(f"   ‚Ä¢ {test['nom']}: {test['amelioration']:.1f}% d'am√©lioration")
                total_amelioration += test['amelioration']
            
            moyenne_amelioration = total_amelioration / len(self.results['tests_performance'])
            print(f"   üìà Am√©lioration moyenne: {moyenne_amelioration:.1f}%")
        
        print(f"\nüí° RECOMMANDATIONS PRIORITAIRES:")
        recommandations_haute = [r for r in self.results['recommandations'] if r['priorite'] == 'Haute']
        for rec in recommandations_haute:
            print(f"   üî¥ {rec['nom']}: {rec['description']}")
        
        # Sauvegarder le rapport
        import json
        rapport_file = f"rapport_optimisation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(rapport_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüìÑ Rapport sauvegard√©: {rapport_file}")
        print("="*60)
    
    def executer_optimisations(self):
        """Ex√©cuter toutes les optimisations"""
        print("üöÄ D√âMARRAGE DES OPTIMISATIONS DE PERFORMANCE")
        print("="*60)
        
        optimisations = [
            self.optimiser_requetes_patients,
            self.optimiser_requetes_dossiers,
            self.optimiser_cache,
            self.optimiser_index_base_donnees,
            self.optimiser_pagination,
            self.analyser_requetes_lentes,
        ]
        
        for optimisation in optimisations:
            try:
                optimisation()
            except Exception as e:
                print(f"‚ùå Erreur lors de {optimisation.__name__}: {e}")
        
        self.generer_recommandations()
        self.generer_rapport()

if __name__ == "__main__":
    optimiseur = OptimisationPerformances()
    optimiseur.executer_optimisations() 