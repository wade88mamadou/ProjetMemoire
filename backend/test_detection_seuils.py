#!/usr/bin/env python
"""
Script de test pour la d√©tection automatique des seuils m√©dicaux
Permet de tester la logique sans avoir besoin de l'interface web
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend_project.settings')
django.setup()

from api.models import RegleConformite, ParametreConformite, Utilisateur
from api.services import DetectionSeuilsService

def creer_donnees_test():
    """Cr√©e des donn√©es de test pour les seuils m√©dicaux"""
    print("üîß Cr√©ation des donn√©es de test...")
    
    # Cr√©er une r√®gle de conformit√©
    regle, created = RegleConformite.objects.get_or_create(
        nomRegle="Surveillance param√®tres vitaux",
        defaults={
            'description': "R√®gle pour surveiller les param√®tres vitaux des patients",
            'typeRegle': "RGPD",
            'niveauCritique': 3
        }
    )
    
    if created:
        print(f"‚úÖ R√®gle cr√©√©e: {regle.nomRegle}")
    else:
        print(f"üìã R√®gle existante: {regle.nomRegle}")
    
    # Cr√©er des param√®tres de test
    parametres_test = [
        {
            'nom': 'Glyc√©mie',
            'seuilMin': 70,
            'seuilMax': 110,
            'unite': 'mg/dL'
        },
        {
            'nom': 'Temp√©rature',
            'seuilMin': 36,
            'seuilMax': 37.5,
            'unite': '¬∞C'
        },
        {
            'nom': 'Poids',
            'seuilMin': 40,
            'seuilMax': 150,
            'unite': 'kg'
        }
    ]
    
    for param_data in parametres_test:
        parametre, created = ParametreConformite.objects.get_or_create(
            nom=param_data['nom'],
            defaults={
                'seuilMin': param_data['seuilMin'],
                'seuilMax': param_data['seuilMax'],
                'unite': param_data['unite'],
                'regle': regle
            }
        )
        
        if created:
            print(f"‚úÖ Param√®tre cr√©√©: {parametre.nom} ({parametre.seuilMin}-{parametre.seuilMax} {parametre.unite})")
        else:
            print(f"üìã Param√®tre existant: {parametre.nom}")

def tester_detection():
    """Teste la d√©tection de seuils avec diff√©rentes valeurs"""
    print("\nüß™ Test de la d√©tection automatique...")
    
    # R√©cup√©rer un utilisateur pour les tests
    try:
        utilisateur = Utilisateur.objects.first()
        if not utilisateur:
            print("‚ö†Ô∏è  Aucun utilisateur trouv√©, cr√©ation d'un utilisateur de test...")
            utilisateur = Utilisateur.objects.create_user(
                username='test_user',
                password='test123',
                email='test@example.com'
            )
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration/cr√©ation de l'utilisateur: {e}")
        return
    
    # Tests de d√©tection
    tests = [
        ('Glyc√©mie', 50, "Valeur en dessous du seuil minimum"),
        ('Glyc√©mie', 80, "Valeur normale"),
        ('Glyc√©mie', 120, "Valeur au-dessus du seuil maximum"),
        ('Temp√©rature', 35, "Temp√©rature trop basse"),
        ('Temp√©rature', 36.5, "Temp√©rature normale"),
        ('Temp√©rature', 39, "Temp√©rature √©lev√©e"),
        ('Poids', 30, "Poids tr√®s faible"),
        ('Poids', 70, "Poids normal"),
        ('Poids', 200, "Poids tr√®s √©lev√©"),
    ]
    
    for nom_parametre, valeur, description in tests:
        print(f"\nüîç Test: {description}")
        print(f"   Param√®tre: {nom_parametre}, Valeur: {valeur}")
        
        try:
            alerte = DetectionSeuilsService.detecter_violation_seuil(
                nom_parametre, valeur, utilisateur
            )
            
            if alerte:
                print(f"   ‚ö†Ô∏è  ALERTE CR√â√âE:")
                print(f"      Type: {alerte.typeAlerte}")
                print(f"      Message: {alerte.message}")
                print(f"      Gravit√©: {alerte.gravite}")
                print(f"      Notification CDP: {alerte.notifie_cdp}")
            else:
                print(f"   ‚úÖ Aucune alerte - valeur dans les normes")
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")

def afficher_statistiques():
    """Affiche les statistiques des alertes cr√©√©es"""
    print("\nüìä Statistiques des alertes...")
    
    from api.models import Alerte
    
    total_alertes = Alerte.objects.count()
    alertes_critiques = Alerte.objects.filter(gravite='critique').count()
    alertes_warning = Alerte.objects.filter(gravite='warning').count()
    alertes_info = Alerte.objects.filter(gravite='info').count()
    alertes_cdp = Alerte.objects.filter(notifie_cdp=True).count()
    
    print(f"   Total alertes: {total_alertes}")
    print(f"   Alertes critiques: {alertes_critiques}")
    print(f"   Alertes warning: {alertes_warning}")
    print(f"   Alertes info: {alertes_info}")
    print(f"   Alertes CDP: {alertes_cdp}")
    
    if total_alertes > 0:
        print("\n   Derni√®res alertes:")
        for alerte in Alerte.objects.order_by('-dateAlerte')[:5]:
            print(f"      - {alerte.dateAlerte}: {alerte.typeAlerte} ({alerte.gravite})")

def main():
    """Fonction principale"""
    print("üöÄ Test de la d√©tection automatique des seuils m√©dicaux")
    print("=" * 60)
    
    try:
        # Cr√©er les donn√©es de test
        creer_donnees_test()
        
        # Tester la d√©tection
        tester_detection()
        
        # Afficher les statistiques
        afficher_statistiques()
        
        print("\n‚úÖ Test termin√© avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main() 