#!/usr/bin/env python3
"""
Script de d√©ploiement s√©curis√© pour ConformiMed
"""

import os
import sys
import secrets
import string
from pathlib import Path

def generate_secret_key(length=50):
    """G√©n√®re une cl√© secr√®te s√©curis√©e"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def generate_jwt_secret(length=50):
    """G√©n√®re une cl√© JWT s√©par√©e"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def create_env_file():
    """Cr√©e le fichier .env avec des valeurs s√©curis√©es"""
    print("üîß Cr√©ation du fichier .env s√©curis√©...")
    
    # G√©n√©rer des cl√©s s√©curis√©es
    secret_key = generate_secret_key()
    jwt_secret = generate_jwt_secret()
    
    env_content = f"""# Configuration Django
SECRET_KEY={secret_key}
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,votre-domaine.com

# Base de donn√©es PostgreSQL
DB_NAME=conformimed_db
DB_USER=conformimed_user
DB_PASSWORD=mot-de-passe-tr√®s-s√©curis√©-pour-postgresql
DB_HOST=localhost
DB_PORT=5432

# JWT Configuration
JWT_SECRET_KEY={jwt_secret}
JWT_ACCESS_TOKEN_LIFETIME=15
JWT_REFRESH_TOKEN_LIFETIME=1440

# Email Configuration (pour notifications et r√©initialisation de mot de passe)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=votre-email@gmail.com
EMAIL_HOST_PASSWORD=mot-de-passe-app-gmail
EMAIL_USE_TLS=True
EMAIL_USE_SSL=False
DEFAULT_FROM_EMAIL=votre-email@gmail.com

# S√©curit√© HTTPS
SECURE_SSL_REDIRECT=True
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=True
SECURE_HSTS_PRELOAD=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True
CSRF_TRUSTED_ORIGINS=https://votre-domaine.com,https://www.votre-domaine.com

# CORS Configuration
CORS_ALLOWED_ORIGINS=http://localhost:3000,https://votre-domaine.com

# Redis Cache (optionnel mais recommand√©)
REDIS_URL=redis://127.0.0.1:6379/1

# Logging
LOG_LEVEL=INFO
SECURITY_LOG_LEVEL=WARNING

# Rate Limiting
RATE_LIMIT_ANON=100/hour
RATE_LIMIT_USER=1000/hour

# File Upload Limits
FILE_UPLOAD_MAX_SIZE=10485760
DATA_UPLOAD_MAX_SIZE=10485760
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√© avec des cl√©s s√©curis√©es")

def create_logs_directory():
    """Cr√©e le r√©pertoire de logs"""
    print("üìÅ Cr√©ation du r√©pertoire de logs...")
    
    logs_dir = Path('logs')
    logs_dir.mkdir(exist_ok=True)
    
    # Cr√©er les fichiers de log vides
    (logs_dir / 'django.log').touch()
    (logs_dir / 'security.log').touch()
    
    print("‚úÖ R√©pertoire de logs cr√©√©")

def check_dependencies():
    """V√©rifie les d√©pendances de s√©curit√©"""
    print("üì¶ V√©rification des d√©pendances de s√©curit√©...")
    
    required_packages = [
        ('django-axes', 'axes'),
        ('django-redis', 'django_redis'),
        ('django-ratelimit', 'ratelimit'),
        ('cryptography', 'cryptography'),
        ('redis', 'redis')
    ]
    
    missing_packages = []
    
    for package_name, import_name in required_packages:
        try:
            __import__(import_name)
            print(f"‚úÖ {package_name} install√©")
        except ImportError:
            missing_packages.append(package_name)
            print(f"‚ùå {package_name} manquant")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Packages manquants: {', '.join(missing_packages)}")
        print("Installez-les avec: pip install " + " ".join(missing_packages))
        return False
    
    return True

def create_security_checklist():
    """Cr√©e une checklist de s√©curit√©"""
    print("üìã Cr√©ation de la checklist de s√©curit√©...")
    
    checklist_content = """# Checklist de S√©curit√© - ConformiMed

## ‚úÖ Configuration de Base
- [ ] Fichier .env cr√©√© avec des cl√©s s√©curis√©es
- [ ] DEBUG = False en production
- [ ] SECRET_KEY g√©n√©r√©e de mani√®re s√©curis√©e
- [ ] ALLOWED_HOSTS configur√©

## ‚úÖ Base de Donn√©es
- [ ] PostgreSQL configur√©
- [ ] Utilisateur de base de donn√©es avec privil√®ges limit√©s
- [ ] Mot de passe fort pour la base de donn√©es
- [ ] Connexion SSL activ√©e

## ‚úÖ Authentification
- [ ] JWT configur√© avec cl√© s√©par√©e
- [ ] Dur√©e de vie des tokens limit√©e
- [ ] Protection contre les attaques par force brute (django-axes)
- [ ] Validation des mots de passe renforc√©e

## ‚úÖ Validation des Donn√©es
- [ ] Validateurs personnalis√©s impl√©ment√©s
- [ ] Sanitisation des entr√©es utilisateur
- [ ] Validation des emails (exclusion des emails temporaires)
- [ ] Validation des noms d'utilisateur

## ‚úÖ Logging et Monitoring
- [ ] Logs de s√©curit√© configur√©s
- [ ] Logs d'audit activ√©s
- [ ] Middleware de s√©curit√© impl√©ment√©
- [ ] D√©tection d'activit√©s suspectes

## ‚úÖ Rate Limiting
- [ ] Limitation de taux configur√©e
- [ ] Protection contre les attaques DDoS
- [ ] Cache configur√© pour les sessions

## ‚úÖ Headers de S√©curit√©
- [ ] X-Frame-Options: DENY
- [ ] X-Content-Type-Options: nosniff
- [ ] X-XSS-Protection: 1; mode=block
- [ ] Referrer-Policy configur√©

## ‚úÖ HTTPS/SSL
- [ ] SSL/TLS configur√©
- [ ] HSTS activ√©
- [ ] Cookies s√©curis√©s
- [ ] CSRF protection

## ‚úÖ Gestion des Erreurs
- [ ] Gestionnaire d'exceptions personnalis√©
- [ ] Messages d'erreur s√©curis√©s
- [ ] Logs d'erreur configur√©s

## üîÑ Actions Requises
1. Modifier les valeurs dans .env selon votre environnement
2. Configurer votre serveur SMTP pour les emails
3. Configurer votre domaine dans CORS_ALLOWED_ORIGINS
4. Configurer HTTPS sur votre serveur
5. Tester toutes les fonctionnalit√©s de s√©curit√©

## üìû Support
En cas de probl√®me, consultez la documentation Django et les logs de s√©curit√©.
"""
    
    with open('SECURITY_CHECKLIST.md', 'w', encoding='utf-8') as f:
        f.write(checklist_content)
    
    print("‚úÖ Checklist de s√©curit√© cr√©√©e")

def main():
    """Fonction principale"""
    print("üöÄ D√©ploiement s√©curis√© de ConformiMed")
    print("=" * 50)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("\n‚ùå D√©ploiement interrompu - D√©pendances manquantes")
        sys.exit(1)
    
    # Cr√©er le fichier .env
    create_env_file()
    
    # Cr√©er le r√©pertoire de logs
    create_logs_directory()
    
    # Cr√©er la checklist
    create_security_checklist()
    
    print("\n" + "=" * 50)
    print("üéâ D√©ploiement s√©curis√© termin√© !")
    print("=" * 50)
    print("üìã Consultez SECURITY_CHECKLIST.md pour les prochaines √©tapes")
    print("üîß Modifiez le fichier .env selon votre environnement")
    print("üß™ Ex√©cutez python test_security_simple.py pour v√©rifier la configuration")

if __name__ == "__main__":
    main() 