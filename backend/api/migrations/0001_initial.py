# Generated by Django 4.2.7 on 2025-07-12 06:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alimentation',
            fields=[
                ('idAlimentation', models.AutoField(primary_key=True, serialize=False)),
                ('typeRepas', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Analyse',
            fields=[
                ('idAnalyse', models.AutoField(primary_key=True, serialize=False)),
                ('typeAnalyse', models.CharField(max_length=100)),
                ('dateAnalyse', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Comportement',
            fields=[
                ('idComportement', models.AutoField(primary_key=True, serialize=False)),
                ('lieuRepas', models.CharField(max_length=100)),
                ('mangeAvecLesMains', models.CharField(max_length=100)),
                ('laveLesMainsAvantDeManger', models.CharField(max_length=100)),
                ('utiliseDuSavon', models.CharField(max_length=100)),
                ('laveLesMainsDesEnfants', models.CharField(max_length=100)),
                ('utiliseGelHydroalcoolique', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DossierMedical',
            fields=[
                ('idDossier', models.AutoField(primary_key=True, serialize=False)),
                ('dateCreation', models.DateField()),
                ('commentaireGeneral', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Logement',
            fields=[
                ('idLogement', models.AutoField(primary_key=True, serialize=False)),
                ('typeLogement', models.CharField(max_length=100)),
                ('nombrePersonnesFoyer', models.IntegerField()),
                ('nbMursMaisonCouverts', models.IntegerField()),
                ('nbSolsMaisonCouverts', models.IntegerField()),
                ('nbToilettesMaison', models.IntegerField()),
                ('toilettesInterieures', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='ParametreConformite',
            fields=[
                ('idParametre', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('seuilMin', models.IntegerField()),
                ('seuilMax', models.IntegerField()),
                ('unite', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('idProfession', models.AutoField(primary_key=True, serialize=False)),
                ('nomProfession', models.CharField(max_length=100)),
                ('typeProfession', models.CharField(max_length=100)),
                ('environnementTravail', models.CharField(max_length=100)),
                ('travailleDehors', models.CharField(max_length=100)),
                ('travailleSansEmploi', models.CharField(max_length=100)),
                ('situationSansEmploi', models.CharField(max_length=100)),
                ('revenu', models.CharField(max_length=100)),
                ('freqRevenu', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('idRapport', models.AutoField(primary_key=True, serialize=False)),
                ('dateRapport', models.DateField()),
                ('titre', models.CharField(max_length=100)),
                ('contenu', models.TextField()),
                ('statutConformite', models.CharField(max_length=100)),
                ('niveauConformite', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='RegleConformite',
            fields=[
                ('idRegle', models.AutoField(primary_key=True, serialize=False)),
                ('nomRegle', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('typeRegle', models.CharField(max_length=100)),
                ('niveauCritique', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Residence',
            fields=[
                ('idResidence', models.AutoField(primary_key=True, serialize=False)),
                ('pays', models.CharField(max_length=100)),
                ('ville', models.CharField(max_length=100)),
                ('quartier', models.CharField(max_length=100)),
                ('adresseComplete', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Vaccin',
            fields=[
                ('idVaccin', models.AutoField(primary_key=True, serialize=False)),
                ('nomVaccin', models.CharField(max_length=100)),
                ('typeVaccination', models.CharField(max_length=100)),
                ('dose', models.IntegerField()),
                ('dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.dossiermedical')),
            ],
        ),
        migrations.CreateModel(
            name='ResultatAnalyse',
            fields=[
                ('idResultatAnalyse', models.AutoField(primary_key=True, serialize=False)),
                ('glycemie', models.FloatField()),
                ('cholesterol', models.FloatField()),
                ('triglyceride', models.FloatField()),
                ('hdl', models.FloatField()),
                ('ldl', models.FloatField()),
                ('creatinine', models.FloatField()),
                ('uree', models.FloatField()),
                ('proteinurie', models.FloatField()),
                ('analyse', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.analyse')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('idPatient', models.AutoField(primary_key=True, serialize=False)),
                ('sexe', models.BooleanField()),
                ('poids', models.FloatField()),
                ('taille', models.FloatField()),
                ('lieuNaissance', models.CharField(max_length=100)),
                ('niveauEtude', models.CharField(max_length=100)),
                ('alimentation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.alimentation')),
                ('comportement', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.comportement')),
                ('logement', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.logement')),
                ('profession', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profession')),
                ('residence', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.residence')),
            ],
        ),
        migrations.CreateModel(
            name='Infection',
            fields=[
                ('idInfection', models.AutoField(primary_key=True, serialize=False)),
                ('nomInfection', models.CharField(max_length=100)),
                ('typeInfection', models.CharField(max_length=100)),
                ('dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.dossiermedical')),
            ],
        ),
        migrations.AddField(
            model_name='dossiermedical',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.patient'),
        ),
        migrations.AddField(
            model_name='analyse',
            name='dossier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.dossiermedical'),
        ),
        migrations.CreateModel(
            name='Alerte',
            fields=[
                ('idAlerte', models.AutoField(primary_key=True, serialize=False)),
                ('typeAlerte', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('dateAlerte', models.DateField()),
                ('dossier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.dossiermedical')),
            ],
        ),
        migrations.CreateModel(
            name='Acces',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeAcces', models.CharField(max_length=100)),
                ('dateAcces', models.DateField()),
                ('regle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.regleconformite')),
            ],
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('specialite', models.CharField(blank=True, max_length=255, null=True)),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur'), ('MEDECIN', 'Medecin'), ('user_simple', 'User Simple')], default='user_simple', max_length=20)),
                ('statut', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('medecin', models.ForeignKey(blank=True, limit_choices_to={'role': 'MEDECIN'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users_simples', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
